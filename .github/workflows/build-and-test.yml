name: Build and Test OS

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Debug environment information
      run: |
        echo "Working directory: ${{ github.workspace }}"
        echo "GitHub event: ${{ github.event_name }}"
        echo "Runner OS: ${{ runner.os }}"
        echo "Directory structure:"
        ls -la
        echo ""
        echo "Boot directory:"
        ls -la boot/
        echo ""
        echo "Kernel directory:"
        ls -la kernel/
        echo ""
        echo "Git status:"
        git status

    - name: Install dependencies
      run: |
        echo "Updating package lists..."
        sudo apt-get update -y
        
        echo "Installing build dependencies..."
        sudo apt-get install -y build-essential nasm gcc gcc-multilib qemu-system-x86 dosfstools
        
        echo "Verifying installations..."
        nasm --version
        gcc --version
        qemu-system-i386 --version
        mkfs.msdos -V || echo "mkfs.msdos might not support -V flag, but should still work"

    - name: Check all required files
      run: |
        echo "Checking for all required source files..."
        
        # 检查引导程序文件
        if [ -f "boot/boot.s" ]; then
          echo "✓ Found boot/boot.s ($(stat -c%s boot/boot.s) bytes)"
        else
          echo "✗ ERROR: boot/boot.s not found"
          ls -la boot/
          exit 1
        fi
        
        # 检查内核文件
        if [ -f "kernel/kernel.c" ]; then
          echo "✓ Found kernel/kernel.c ($(stat -c%s kernel/kernel.c) bytes)"
        else
          echo "✗ ERROR: kernel/kernel.c not found"
          ls -la kernel/
          exit 1
        fi
        
        # 检查其他重要文件
        files_to_check=("build.sh" "run-qemu.sh" "static-analysis.py" "unit-test-sim.py")
        for file in "${files_to_check[@]}"; do
          if [ -f "$file" ]; then
            echo "✓ Found $file ($(stat -c%s $file) bytes)"
          else
            echo "⚠ WARNING: $file not found"
          fi
        done

    - name: Test build commands
      run: |
        echo "Testing build commands step by step..."
        
        # 测试NASM汇编
        echo "1. Testing NASM assembly..."
        nasm -f bin boot/boot.s -o boot/boot.bin
        if [ -f "boot/boot.bin" ]; then
          echo "✓ Bootloader assembled successfully ($(stat -c%s boot/boot.bin) bytes)"
        else
          echo "✗ ERROR: Failed to assemble bootloader"
          exit 1
        fi
        
        # 测试GCC编译
        echo "2. Testing GCC compilation with different options..."
        echo "Trying basic compilation..."
        gcc -c kernel/kernel.c -o kernel_test.o && echo "✓ Basic compilation works" || echo "✗ Basic compilation failed"
        
        echo "Trying freestanding compilation..."
        gcc -c -ffreestanding kernel/kernel.c -o kernel_test2.o && echo "✓ Freestanding compilation works" || echo "✗ Freestanding compilation failed"
        
        echo "Trying 32-bit compilation..."
        gcc -c -m32 kernel/kernel.c -o kernel_test3.o && echo "✓ 32-bit compilation works" || echo "✗ 32-bit compilation failed"
        
        echo "Trying combined flags..."
        gcc -c -m32 -ffreestanding kernel/kernel.c -o kernel_test4.o && echo "✓ Combined flags compilation works" || echo "✗ Combined flags compilation failed"
        
        # 清理测试文件
        rm -f kernel_test*.o
        
        # 尝试完整内核构建
        echo "3. Trying full kernel build..."
        gcc -m32 -ffreestanding -nostdlib -nostartfiles -o kernel.bin kernel/kernel.c 2>build_error.log || echo "Kernel build failed, checking error log"
        
        if [ -f "kernel.bin" ]; then
          echo "✓ Full kernel built successfully ($(stat -c%s kernel.bin) bytes)"
        else
          echo "✗ Full kernel build failed"
          echo "Error log:"
          cat build_error.log || echo "No error log available"
        fi

    - name: Run build script
      run: |
        echo "Running build script with error checking..."
        if [ -f "build.sh" ]; then
          chmod +x build.sh
          echo "Executing build.sh..."
          ./build.sh 2>script_error.log || echo "Build script failed, checking error log"
          echo "Build script output:"
          cat script_error.log || echo "No script error log"
        else
          echo "No build.sh found, using manual build..."
          nasm -f bin boot/boot.s -o boot/boot.bin
          gcc -m32 -ffreestanding -nostdlib -nostartfiles -o kernel.bin kernel/kernel.c
        fi

    - name: Verify build artifacts
      run: |
        echo "Verifying final build artifacts..."
        
        if [ -f "boot/boot.bin" ]; then
          echo "✓ Bootloader exists ($(stat -c%s boot/boot.bin) bytes)"
        else
          echo "✗ ERROR: Bootloader (boot/boot.bin) not found"
          ls -la boot/
          exit 1
        fi
        
        if [ -f "kernel.bin" ]; then
          echo "✓ Kernel exists ($(stat -c%s kernel.bin) bytes)"
        else
          echo "✗ ERROR: Kernel (kernel.bin) not found"
          ls -la
          exit 1
        fi

    - name: Run static analysis
      run: |
        echo "Running static analysis..."
        if [ -f "static-analysis.py" ]; then
          python3 static-analysis.py || echo "Static analysis failed but continuing..."
        else
          echo "No static-analysis.py found, skipping..."
        fi

    - name: Create OS image
      run: |
        echo "Creating OS image..."
        if [ -f "boot/boot.bin" ] && [ -f "kernel.bin" ]; then
          echo "Creating floppy disk image..."
          dd if=/dev/zero of=floppy.img bs=1K count=1440
          mkfs.msdos floppy.img || echo "mkfs.msdos failed but continuing..."
          
          echo "Writing bootloader to image..."
          dd if=boot/boot.bin of=floppy.img conv=notrunc
          
          echo "OS image created successfully ($(stat -c%s floppy.img) bytes)"
        else
          echo "Cannot create image, missing boot.bin or kernel.bin"
        fi

    - name: Test run OS in QEMU
      run: |
        echo "Testing OS run in QEMU..."
        if [ -f "floppy.img" ]; then
          echo "Running QEMU for 10 seconds..."
          timeout 10s qemu-system-i386 -fda floppy.img -boot a -serial stdio -display none || echo "QEMU run completed or timed out"
        else
          echo "No floppy image to test with"
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: os-build-artifacts
        path: |
          boot/boot.bin
          kernel.bin
          floppy.img
        if-no-files-found: ignore