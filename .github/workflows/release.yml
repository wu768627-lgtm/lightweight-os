name: Create Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up environment
      run: |
        echo "Setting up build environment..."
        sudo apt-get update
        sudo apt-get install -y build-essential nasm gcc-multilib qemu-system-x86 dosfstools zip

    - name: Build project
      run: |
        echo "Building LightweightOS..."
        chmod +x build.sh
        ./build.sh

    - name: Verify build artifacts
      run: |
        echo "Verifying build artifacts..."
        if [ -f "boot/boot.bin" ]; then
          echo "✓ Bootloader built successfully ($(stat -c%s boot/boot.bin) bytes)"
        else
          echo "✗ ERROR: Bootloader not found"
          exit 1
        fi
        
        if [ -f "kernel.bin" ]; then
          echo "✓ Kernel built successfully ($(stat -c%s kernel.bin) bytes)"
        else
          echo "✗ ERROR: Kernel not found"
          exit 1
        fi

    - name: Create packages
      run: |
        echo "Creating release packages..."
        VERSION=${GITHUB_REF#refs/tags/}
        PACKAGE_NAME="lightweight-os-${VERSION}"
        
        # Create temporary directory
        mkdir -p "/tmp/${PACKAGE_NAME}"
        
        # Copy files
        cp -r boot "/tmp/${PACKAGE_NAME}/"
        cp -r kernel "/tmp/${PACKAGE_NAME}/"
        cp -r drivers "/tmp/${PACKAGE_NAME}/"
        cp -r libs "/tmp/${PACKAGE_NAME}/"
        cp -r userland "/tmp/${PACKAGE_NAME}/"
        cp -r tools "/tmp/${PACKAGE_NAME}/"
        cp -r docs "/tmp/${PACKAGE_NAME}/"
        cp -r .github "/tmp/${PACKAGE_NAME}/"
        
        cp build.sh "/tmp/${PACKAGE_NAME}/"
        cp run.sh "/tmp/${PACKAGE_NAME}/"
        cp run-qemu.sh "/tmp/${PACKAGE_NAME}/"
        cp push-to-github.sh "/tmp/${PACKAGE_NAME}/"
        cp push-to-github.bat "/tmp/${PACKAGE_NAME}/"
        cp diagnose.sh "/tmp/${PACKAGE_NAME}/"
        cp Makefile "/tmp/${PACKAGE_NAME}/"
        cp README.md "/tmp/${PACKAGE_NAME}/"
        cp RELEASE.md "/tmp/${PACKAGE_NAME}/"
        cp wuying-test-config.json "/tmp/${PACKAGE_NAME}/"
        cp static-analysis.py "/tmp/${PACKAGE_NAME}/"
        cp unit-test-sim.py "/tmp/${PACKAGE_NAME}/"
        cp coverage-analysis.py "/tmp/${PACKAGE_NAME}/"
        cp integration-test.py "/tmp/${PACKAGE_NAME}/"
        cp run-tests.py "/tmp/${PACKAGE_NAME}/"
        cp bug-test.py "/tmp/${PACKAGE_NAME}/"
        cp bug-test-improved.py "/tmp/${PACKAGE_NAME}/"
        
        # Create version file
        echo "LightweightOS ${VERSION}" > "/tmp/${PACKAGE_NAME}/VERSION"
        echo "Released on: $(date)" >> "/tmp/${PACKAGE_NAME}/VERSION"
        
        # Create packages
        cd /tmp
        zip -r "${PACKAGE_NAME}.zip" "${PACKAGE_NAME}"
        tar -czf "${PACKAGE_NAME}.tar.gz" "${PACKAGE_NAME}"
        
        # Move packages to workspace
        mv "${PACKAGE_NAME}.zip" "${PACKAGE_NAME}.tar.gz" "${GITHUB_WORKSPACE}/"
        
        cd "${GITHUB_WORKSPACE}"
        echo "Packages created:"
        ls -lh lightweight-os-*.zip lightweight-os-*.tar.gz

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## LightweightOS Release
          
          Thank you for downloading LightweightOS! This release contains the complete source code and pre-built binaries.
          
          ### Installation
          
          1. Download either the ZIP or TAR.GZ package
          2. Extract the archive
          3. Follow the instructions in README.md to build and run
          
          ### Contents
          
          - Full source code
          - Build scripts
          - Documentation
          - Test suite
          
          ### System Requirements
          
          - NASM (assembler)
          - GCC (C compiler)
          - QEMU (for testing)
        draft: false
        prerelease: false

    - name: Upload ZIP Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./lightweight-os-*.zip
        asset_name: lightweight-os-${{ github.ref_name }}.zip
        asset_content_type: application/zip

    - name: Upload TAR.GZ Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./lightweight-os-*.tar.gz
        asset_name: lightweight-os-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip