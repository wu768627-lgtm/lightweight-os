name: Debug Build Issues

on:
  push:
    branches: [ debug ]
  workflow_dispatch:

jobs:
  debug:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Environment Information
      run: |
        echo "=== 环境信息 ==="
        echo "工作目录: ${{ github.workspace }}"
        echo "Runner OS: ${{ runner.os }}"
        echo "Runner Architecture: ${{ runner.arch }}"
        echo ""
        echo "=== 系统信息 ==="
        uname -a
        echo ""
        echo "=== 可用内存 ==="
        free -h
        echo ""
        echo "=== 磁盘空间 ==="
        df -h
        echo ""
        echo "=== 当前目录内容 ==="
        ls -la
        echo ""
        echo "=== Git 状态 ==="
        git status

    - name: Install Dependencies
      run: |
        echo "=== 更新包列表 ==="
        sudo apt-get update -y
        echo ""
        echo "=== 安装必要工具 ==="
        sudo apt-get install -y build-essential nasm gcc gcc-multilib qemu-system-x86 dosfstools
        echo ""
        echo "=== 验证安装 ==="
        echo "NASM: $(nasm --version)"
        echo "GCC: $(gcc --version | head -n 1)"
        echo "QEMU: $(qemu-system-i386 --version | head -n 1)"

    - name: File Structure Analysis
      run: |
        echo "=== 检查目录结构 ==="
        if [ ! -d "boot" ]; then
          echo "错误: 找不到 boot 目录"
          ls -la
          exit 1
        fi
        
        if [ ! -d "kernel" ]; then
          echo "错误: 找不到 kernel 目录"
          ls -la
          exit 1
        fi
        
        echo "boot 目录内容:"
        ls -la boot/
        echo ""
        echo "kernel 目录内容:"
        ls -la kernel/
        echo ""
        
        echo "=== 检查必要文件 ==="
        declare -a REQUIRED_FILES=("boot/boot.s" "kernel/kernel.c")
        for file in "${REQUIRED_FILES[@]}"; do
          if [ -f "$file" ]; then
            echo "找到文件: $file ($(stat -c%s "$file") 字节)"
          else
            echo "错误: 找不到文件 $file"
            find . -name "*" | grep -E "(boot\.s|kernel\.c)"
            exit 1
          fi
        done

    - name: Bootloader Analysis
      run: |
        echo "=== 引导程序分析 ==="
        echo "boot.s 文件内容:"
        head -n 30 boot/boot.s
        echo ""
        echo "=== 尝试汇编引导程序 ==="
        nasm -f bin boot/boot.s -o boot/boot.bin
        if [ $? -eq 0 ] && [ -f "boot/boot.bin" ]; then
          echo "引导程序汇编成功 ($(stat -c%s boot/boot.bin) 字节)"
        else
          echo "引导程序汇编失败"
          exit 1
        fi

    - name: Kernel Analysis
      run: |
        echo "=== 内核文件分析 ==="
        echo "kernel.c 文件大小: $(stat -c%s kernel/kernel.c) 字节"
        echo "kernel.c 文件前50行:"
        head -n 50 kernel/kernel.c
        echo ""
        echo "=== 检查内核依赖文件 ==="
        KERNEL_DEPS=("memory.c" "process.c" "interrupts.c" "syscall.c")
        for dep in "${KERNEL_DEPS[@]}"; do
          if [ -f "kernel/$dep" ]; then
            echo "找到依赖文件: kernel/$dep ($(stat -c%s "kernel/$dep") 字节)"
          else
            echo "警告: 找不到依赖文件: kernel/$dep"
          fi
        done

    - name: Kernel Compilation Test
      run: |
        echo "=== 内核编译测试 ==="
        echo "1. 测试编译成对象文件:"
        gcc -c kernel/kernel.c -o kernel_test.o 2>compile_error.log
        if [ $? -eq 0 ] && [ -f "kernel_test.o" ]; then
          echo "   对象文件编译成功 ($(stat -c%s kernel_test.o) 字节)"
          rm kernel_test.o
        else
          echo "   对象文件编译失败"
          echo "   错误日志:"
          cat compile_error.log
          exit 1
        fi
        
        echo "2. 测试不同编译选项:"
        COMPILE_OPTIONS=(
          "-c"
          "-c -m32"
          "-c -ffreestanding"
          "-c -m32 -ffreestanding"
          "-c -m32 -ffreestanding -nostdlib"
        )
        
        for opts in "${COMPILE_OPTIONS[@]}"; do
          echo "   测试选项: gcc $opts kernel/kernel.c -o kernel_test.o"
          gcc $opts kernel/kernel.c -o kernel_test.o 2>/dev/null
          if [ $? -eq 0 ] && [ -f "kernel_test.o" ]; then
            echo "   ✓ 成功"
            rm kernel_test.o
          else
            echo "   ✗ 失败"
          fi
        done
        
        echo "3. 测试完整链接:"
        gcc -m32 -ffreestanding -nostdlib -nostartfiles -o kernel.bin kernel/kernel.c 2>link_error.log
        if [ $? -eq 0 ] && [ -f "kernel.bin" ]; then
          echo "   完整链接成功 ($(stat -c%s kernel.bin) 字节)"
        else
          echo "   完整链接失败"
          echo "   错误日志:"
          cat link_error.log
        fi

    - name: Create Simple Test Kernel
      run: |
        echo "=== 创建简化版内核进行测试 ==="
        echo "创建简化版内核文件..."
        cat > kernel/test_kernel.c << 'EOF'
        // 简化版内核用于测试编译
        void kernel_main() {
            // 简单的内核入口点
            while (1) {
                // 内核主循环
            }
        }
        
        void dummy_function() {
            // 占位函数
        }
        EOF
        
        echo "尝试编译简化版内核:"
        gcc -c kernel/test_kernel.c -o test_kernel.o
        if [ $? -eq 0 ] && [ -f "test_kernel.o" ]; then
          echo "简化版内核编译成功"
          rm test_kernel.o
        else
          echo "简化版内核编译失败"
        fi
        
        rm kernel/test_kernel.c

    - name: Final Summary
      run: |
        echo "=== 调试总结 ==="
        echo "如果到达此步骤，说明基本环境和文件结构没有问题"
        echo "如果之前的步骤中有失败，请查看相应的错误日志"
        echo ""
        echo "当前目录内容:"
        ls -la